generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//   shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
// }

model User {
  id                          Int        @id @default(autoincrement())
  password                    String     @db.VarChar(128)
  name                        String     @unique @db.VarChar(150) @map("username")
  firstName                   String     @default("") @db.VarChar(150) @map("first_name")
  lastName                    String     @default("") @db.VarChar(150) @map("last_name")
  email                       String     @db.VarChar(254)

  @@index([name], map: "auth_user_username_6821ab7c_like")

  @@map("auth_user")
}

model City {
  pindex            String?             @db.VarChar(6)
  city              String              @db.VarChar(80)
  id                Int                 @id @default(autoincrement())
  customers         Customer[]

  @@index([city, pindex], map: "customer_city_city_pindex_fe14c5dd_idx")

  @@map("customer_city")
}

model Customer {
  id            Int            @id @default(autoincrement())
  nick          String         @db.VarChar(255)
  name          String         @default("") @db.VarChar(255)
  address       String         @default("") @db.VarChar(255)
  createdAt    DateTime       @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt    DateTime       @updatedAt @db.Timestamptz(6) @map("updated_at")
  cityId       Int?           @map("city_id")
  city          City?         @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_customer_city_id_f38aa8fc_fk_customer_city_id")
  orders        Order[]

  @@index([cityId], map: "customer_customer_city_id_f38aa8fc")

  @@map("customer_customer")
}

model OrderItem {
  id              Int              @id @default(autoincrement())
  amount          Decimal?         @db.Decimal(5, 2)
  price           Int?
  createdAt       DateTime         @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt       DateTime         @updatedAt @db.Timestamptz(6) @map("updated_at")
  orderId         Int?             @map("order_id")
  productId       Int?             @map("product_id")
  order           Order?           @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_item_orderitem_order_id_51e755c8_fk_order_order_id")
  product         Product?         @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_item_orderitem_product_id_0a6a03af_fk_product_product_id")

  @@index([orderId], map: "order_item_orderitem_order_id_51e755c8")
  @@index([productId], map: "order_item_orderitem_product_id_0a6a03af")

  @@map("order_item_orderitem")
}

model Order {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt            DateTime               @updatedAt @db.Timestamptz(6) @map("updated_at")
  postCost             Int                    @default(0) @map("post_cost")
  packet               Int?
  deliveryType         Int?                   @map("delivery_type")
  address              String                 @default("") @db.VarChar(255)
  gift                 String                 @default("") @db.VarChar(255)
  customerId           Int?                   @map("customer_id")
  orderItems           OrderItem[]
  customer             Customer?     @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_order_customer_id_5bbbd957_fk_customer_customer_id")

  @@index([customerId], map: "order_order_customer_id_5bbbd957")

  @@map("order_order")
}

model Product {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  threads              Int?
  contents             Int?
  price                Int
  weight               Decimal?               @db.Decimal(4, 2)
  width                Int?
  density              Int?
  dollarPrice          Decimal?               @db.Decimal(4, 2) @map("dollar_price")
  dollarRate           Decimal?               @db.Decimal(5, 2) @map("dollar_rate")
  widthShop            Int?                   @map("width_shop")
  densityShop          Int?                   @map("density_shop")
  weightForCount       Int?                   @map("weight_for_count")
  lengthForCount       Decimal?               @db.Decimal(5, 2) @map("length_for_count")
  pricePre             Int?                   @map("price_pre")
  image                String                 @db.VarChar(100)
  createdAt            DateTime               @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt            DateTime               @updatedAt @db.Timestamptz(6) @map("updated_at")
  productTypeId        Int?                   @map("product_type_id")
  fleece               Boolean?
  orderItems           OrderItem[]
  productType          ProductType?   @relation(fields: [productTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_product_product_type_id_4bfbbfda_fk_product_p")

  @@index([productTypeId], map: "product_product_product_type_id_4bfbbfda")

  @@map("product_product")
}

model ProductType {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  createdAt       DateTime          @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt       DateTime          @updatedAt @db.Timestamptz(6) @map("updated_at")
  products        Product[]

  @@map("product_producttype")
}
